{"version":3,"sources":["component/TodoList.jsx","App.jsx","index.js"],"names":["TodoList","useState","item","setItem","list","localStorage","getItem","console","log","JSON","parse","getLocalItems","newItem","setNewItem","toggle","setToggle","toggleEdit","setToggleEdit","showResults","setShowResults","itemList","map","val","id","name","allItem","Date","getTime","toString","alert","useEffect","stringify","className","type","placeholder","onChange","e","target","value","Tooltip","title","Button","onClick","newEditItem","find","editItem","index","updatedItem","filter","deleteItem","App","ReactDOM","render","document","getElementById"],"mappings":"8PAuHeA,EArGE,WAEb,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA6BF,mBAbX,WAClB,IAAIG,EAAOC,aAAaC,QAAQ,QAEhC,OADAC,QAAQC,IAAIJ,GACTA,EACQK,KAAKC,MAAML,aAAaC,QAAQ,SAEhC,GAO2BK,IAAtC,mBAAMC,EAAN,KAAeC,EAAf,KACA,EAA2BZ,oBAAS,GAApC,mBAAMa,EAAN,KAAcC,EAAd,KACA,EAAmCd,mBAAS,MAA5C,mBAAMe,EAAN,KAAkBC,EAAlB,KACA,EAAsChB,oBAAS,GAA/C,mBAAOiB,EAAP,KAAoBC,EAApB,KAEMC,EAAW,WACb,GAAIlB,EAEE,GAAGA,IAASY,EACdD,EACID,EAAQS,KAAI,SAACC,GACT,OAAGA,EAAIC,KAAOP,EACH,2BAAIM,GAAX,IAAgBE,KAAKtB,IAElBoB,MAGfP,GAAU,GACVZ,EAAQ,IACRc,EAAc,MACdE,GAAe,OACd,CACD,IAAMM,EAAU,CAACF,IAAI,IAAIG,MAAOC,UAAUC,WAAYJ,KAAKtB,GAC3DW,EAAW,GAAD,mBAAKD,GAAL,CAAca,KACxBtB,EAAQ,IACRgB,GAAe,QAlBfU,MAAM,iCA8Cd,OAJAC,qBAAU,WACPzB,aAAaF,QAAQ,OAAQM,KAAKsB,UAAUnB,MAC5C,CAACA,IAGA,mCACI,qBAAKoB,UAAU,WAAf,SACI,sBAAKA,UAAU,aAAf,UACI,uBACA,2CACA,uBACA,uBAAOC,KAAK,OAAOC,YAAY,cAAcC,SAAU,SAACC,GAAD,OAAMjC,EAAQiC,EAAEC,OAAOC,QAAQA,MAAOpC,IAC7F,cAACqC,EAAA,EAAD,CAASC,MAAM,YAAf,SAGK1B,EAAQ,eAAC2B,EAAA,EAAD,CAAQT,UAAU,SAASU,QAAStB,EAApC,cAA+C,cAAC,IAAD,OACpD,cAACqB,EAAA,EAAD,CAAQT,UAAU,SAASU,QAAStB,EAApC,SAA8C,cAAC,IAAD,QAItD,uBACA,6BAEKR,EAAQS,KAAI,SAACC,EAAKC,GACf,OAAO,sBAAKS,UAAU,aAAf,UACC,cAACO,EAAA,EAAD,CAASC,MAAM,YAAf,SACA,sBAAME,QAAS,kBAnC9B,SAACnB,GACd,IAAIoB,EAAc/B,EAAQgC,MAAK,SAACtB,GAC5B,OAAOA,EAAIC,KAAOA,KAEtBR,GAAU,GACVZ,EAAQwC,EAAYnB,MACpBP,EAAcM,GA6BmCsB,CAASvB,EAAIC,KAAlC,SACA,cAAC,IAAD,CAAUS,UAAU,mBAGpB,cAACO,EAAA,EAAD,CAASC,MAAM,cAAf,SACA,sBAAME,QAAS,kBAnD5B,SAACI,GAChB,IAAMC,EAAcnC,EAAQoC,QAAO,SAAC1B,GAChC,OAAOwB,IAAUxB,EAAIC,MAEzBV,EAAWkC,GA+CsCE,CAAW3B,EAAIC,KAApC,SACA,cAAC,IAAD,CAAYS,UAAU,mBAGtB,6BAAKV,EAAIE,SAXuBF,EAAIC,SAenDL,EAAY,cAACqB,EAAA,EAAD,CAASC,MAAM,mBAAf,SACb,eAACC,EAAA,EAAD,CAAQT,UAAU,UAAUU,QArD3B,WACb7B,EAAW,KAoDC,cAAiD,cAAC,IAAD,SACrC,KACZ,+BCpGLqC,EARH,WACR,OACI,mCACI,cAAC,EAAD,O,YCAZC,IAASC,OAAO,yCAAG,cAAC,EAAD,IAAH,OACdC,SAASC,eAAe,W","file":"static/js/main.e8ca3ac6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\n\r\nconst getLocalItems = () =>{\r\n    let list = localStorage.getItem('list');\r\n    console.log(list);\r\n    if(list){\r\n        return JSON.parse(localStorage.getItem('list'));\r\n    }else{\r\n        return [];\r\n    }\r\n}\r\n\r\nconst TodoList = () => {\r\n\r\n    const [item, setItem] = useState(\"\");\r\n    const[newItem, setNewItem] = useState(getLocalItems());\r\n    const[toggle, setToggle] = useState(true);\r\n    const[toggleEdit, setToggleEdit] = useState(null);\r\n    const [showResults, setShowResults] = useState(false);\r\n\r\n    const itemList = () => {\r\n        if(!item){\r\n            alert(`please fill the input field.`);\r\n        }else if(item && !toggle){\r\n            setNewItem(\r\n                newItem.map((val) =>{\r\n                    if(val.id === toggleEdit){\r\n                        return {...val, name:item}\r\n                    }\r\n                    return val;\r\n                })\r\n            )\r\n            setToggle(true);\r\n            setItem('');\r\n            setToggleEdit(null);\r\n            setShowResults(true);\r\n        }else{\r\n            const allItem = {id: new Date().getTime().toString(), name:item}\r\n            setNewItem([...newItem, allItem]);\r\n            setItem(\"\"); \r\n            setShowResults(true);\r\n        }\r\n    };  \r\n\r\n    const deleteItem = (index) =>{\r\n        const updatedItem = newItem.filter((val) =>{\r\n            return index !== val.id;\r\n        })\r\n        setNewItem(updatedItem);\r\n    };\r\n\r\n    const removeAll =() =>{\r\n        setNewItem([]);\r\n    }\r\n\r\n    const editItem = (id) =>{\r\n        let newEditItem = newItem.find((val) =>{\r\n            return val.id === id;\r\n        });\r\n        setToggle(false);\r\n        setItem(newEditItem.name);\r\n        setToggleEdit(id);\r\n    }\r\n\r\n    useEffect(() => {\r\n       localStorage.setItem('list', JSON.stringify(newItem));\r\n    }, [newItem]);\r\n\r\n    return(\r\n        <>\r\n            <div className=\"main_div\">\r\n                <div className=\"center_div\">\r\n                    <br/>\r\n                    <h1> TodoList</h1>\r\n                    <br/>\r\n                    <input type=\"text\" placeholder=\"Add an Item\" onChange={(e)=> setItem(e.target.value)} value={item}/>\r\n                    <Tooltip title=\"Add Items\">\r\n                    \r\n                     {\r\n                         toggle ?<Button className=\"newBtn\" onClick={itemList}> <AddIcon/></Button>\r\n                          : <Button className=\"newBtn\" onClick={itemList}><EditIcon/></Button>\r\n                     } \r\n                    \r\n                    </Tooltip>\r\n                    <br/>\r\n                    <ol>\r\n                        \r\n                        {newItem.map((val, id) => {\r\n                            return <div className=\"todo_style\" key={val.id}>\r\n                                    <Tooltip title=\"Edit Item\">\r\n                                    <span onClick={() => editItem(val.id)}> \r\n                                    <EditIcon className=\"deleteIcon\"/>\r\n                                    </span>\r\n                                    </Tooltip>\r\n                                    <Tooltip title=\"Delete Item\">\r\n                                    <span onClick={() => deleteItem(val.id)}> \r\n                                    <DeleteIcon className=\"deleteIcon\"/>\r\n                                    </span>\r\n                                    </Tooltip>\r\n                                    <li>{val.name}</li>\r\n                                    </div>\r\n                        })}\r\n                    </ol>\r\n                   { showResults?<Tooltip title=\"Remove all Items\">\r\n                    <Button className=\"newBtn1\" onClick={removeAll}> <DeleteIcon/></Button>\r\n                    </Tooltip>: null}\r\n                    <br/>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import React from 'react';\nimport TodoList from './component/TodoList';\n\n\nconst App = () => {\n    return(\n        <>\n            <TodoList/>\n        </>\n    ); \n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(<> <App/> </>,\n  document.getElementById('root')\n);"],"sourceRoot":""}